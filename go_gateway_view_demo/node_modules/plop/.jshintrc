{
	// Settings
	"maxerr"        : 50,    // Maximum error before stopping.
	"passfail"      : false, // Stop on first error.


	// Predefined globals whom JSHint will ignore.
	"browser"       : true,  // Standard browser globals e.g. `window`, `document`.
	"jquery"        : false,  // Globals exposed by the jQuery JavaScript library.
	"node"          : true,  // Globals available when your code is running inside of the Node runtime environment.


	// Custom globals.
	"globals": {
		"after"     : false,
		"afterEach" : false,
		"angular"   : false,
		"before"    : false,
		"beforeEach": false,
		"browser"   : false,
		"describe"  : false,
		"expect"    : false,
		"inject"    : false,
		"it"        : false,
		"jasmine"   : false,
		"spyOn"     : false,
		"require"   : false,
		"define"    : false
	},


	// Development.
	"debug"         : false, // Allow debugger statements e.g. browser breakpoints.
	"devel"         : false, // Allow developments statements e.g. `console.log();`.


	// EcmaScript.
	"esnext"        : true, // Allow EcmaScript 6 syntax.
	"globalstrict"  : true, // Allow global "use strict" (also enables 'strict').
	"strict"        : true,  // Require `use strict` pragma  in every file.


	// The Good Parts.
	"asi"           : false, // Tolerate Automatic Semicolon Insertion (no semicolons).
	"bitwise"       : true,  // Prohibit bitwise operators (&, |, ^, etc.).
	"boss"          : true,  // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
	"curly"         : true,  // Require {} for every new block or scope.
	"eqeqeq"        : true,  // Require triple equals i.e. `===`.
	"eqnull"        : true,  // Tolerate use of `== null`.
	"evil"          : false, // Tolerate use of `eval`.
	"expr"          : false, // Tolerate `ExpressionStatement` as Programs.
	"forin"         : false, // Tolerate `for in` loops without `hasOwnPrototype`.
	"immed"         : true,  // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
	"latedef"       : "nofunc",  // Prohibit variable use before definition.
	"laxbreak"      : false, // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
	"loopfunc"      : false, // Allow functions to be defined within loops.
	"noarg"         : true,  // Prohibit use of `arguments.caller` and `arguments.callee`.
	"regexdash"     : true,  // Tolerate unescaped last dash i.e. `[-...]`.
	"regexp"        : true,  // Prohibit `.` and `[^...]` in regular expressions.
	"scripturl"     : false, // Tolerate script-targeted URLs.
	"shadow"        : false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
	"smarttabs"     : true,  // Suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only.
	"supernew"      : false, // Tolerate `new function () { ... };` and `new Object;`.
	"undef"         : true,  // Require all non-global variables be declared before they are used.


	// Personal styling prefrences.
	"camelcase"     : true,  // Force all variable names to use either camelCase style or UPPER_CASE with underscores.
	"indent"        : 4,     // Enforces specific tab width for your code.
	"newcap"        : true,  // Require capitalization of all constructor functions e.g. `new F()`.
	"noempty"       : true,  // Prohipit use of empty blocks.
	"nomen"         : false, // Prohibit use of initial or trailing underbars in names.
	"nonew"         : false,  // Prohibit use of constructors for side-effects.
	"onevar"        : false, // Allow only one `var` statement per function.
	"plusplus"      : false, // Prohibit use of `++` & `--`.
	"quotmark"      : "single", // Enforces the consistency of quotation marks used throughout your code.
	"sub"           : false, // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
	"trailing"      : true,  // Prohibit trailing whitespaces.
	"undef"         : true,  // Prohibits the use of explicitly undeclared variables.
	"unused"        : "vars",  // Warns when you define and never use your variables.
	"white"         : false // Check against strict whitespace and indentation rules.
}
